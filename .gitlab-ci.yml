# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
    VERCEL_TOKEN: MkY7zfiztYQsUxHMPbS4D50f
    VERCEL_ORG_ID: lGlSAuUd69gWNYH4bSL9RPMe
    VERCEL_PROJECT_ID: prj_Po18EFe36ruMtfk9hiKQUTM5ruMU
    
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use #load nvm
    - npm install
    - npm build
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 5
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 5
    - echo "No lint issues found."

#deploy_preview:
#  stage: deploy
#  except:   # This creates preview environments on commits pushed to a git branch
#    - main
#  script:
#  
 #   - echo "Vercel git branch "
 #   - npm install --global vercel
 #   - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
 #   - vercel build --token=$VERCEL_TOKEN
 #   - vercel deploy --prebuilt  --token=$VERCEL_TOKEN

#deploy_production:
#  stage: deploy
#  only:  # This creates production environments on commits to the main branch
#    - main
#  script:
    # - echo "Vercel master"
    # - npm install --global vercel
    # - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    # - vercel build --prod --token=$VERCEL_TOKEN
    # - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
    # - echo "Vercel deployed"

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
